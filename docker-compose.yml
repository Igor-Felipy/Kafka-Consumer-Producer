services:
  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports: 
      - '9092:9092'
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENERS=yes
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports: 
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports: 
      - '8080:8080'
    restart: always
    environment:
      - KAFKA_CLUSTER_0_NAME=DataWayBR
      - KAFKA_CLUSTER_0_BOOTSTRAPSREVERS=kafka:9092
      - KAFKA_CLUSTER_0_ZOOKEEPER=zookeeper:2181

  producer:
    image: 'springio/gs-spring-boot-docker'
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka

  consumer:
    image: 'springio/gs-spring-boot-docker'
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka

  database:
    image: "postgres:16.0-alpine3.18"
    env_file:
      - ./.env.development
    ports:
      - "5432:5432"
    depends_on:
      - kafka

  result-ms:
    image: 'springio/gs-spring-boot-docker'
    build:
      context: .
      dockerfile: Dockerfile.result
    depends_on:
      - database

  front:
    build:
      context: .
      dockerfile: ./front/Dockerfile.front
